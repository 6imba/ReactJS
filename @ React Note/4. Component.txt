# React Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.

# Conceptually, components are like JavaScript functions.
# Component takes props and returns HTML(JSX)element.
# Always start component names with a capital letter.
# Composing Components(nested component).
# Extracting Components(breaking in pieces).

# Function/Class Component:

# Function component in react is simply Javascript function that optional(takes props as argument) and return JSX(HTML).

# Class component in react is simply ES6 Class that optional(takes props as argument) and return JSX(HTML) .

# Both Function&Class_component can maintain private internal state.

# State in Component:
    - A component can maintain a private internal state.
    - A component can maintain some information which is private to that particular component.
    - and use that information to discribe the UI.

# Function Component:
     function Form(){
         return(
            <h1>Hi</h1>
         )
     }

# Child Class of React.Component:
     class Form extends React.Component{
         render() {
            return(
                <h1>Hi</h1>
            )
         }
     }

# ES6 Child class:
    class Child extends Parent{
        constructor(name) {
            super();
            this.name = name;
        }
        add(){
            return this.name + " is " + " years old."
        }
    }


- Before React 16.8, Class components were the only way to track state and lifecycle on a React component. Function components were considered "state-less".
- With the addition of Hooks, Function components are now almost equivalent to Class components. The differences are so minor that you will probably never need to use a Class component in React.
- Even though Function components are preferred, there are no current plans on removing Class components from React.

- Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML via a render() function.

- The component has to include the extends React.Component statement, this statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.

# Component Constructor:
    - If there is a constructor() function in your component, this function will be called when the component gets initiated.
    - The constructor function is where you initiate the component's properties.
    - In React, component properties should be kept in an object called state.

    - The constructor function is also where you honor the inheritance of the parent component by including the super() statement, which executes the parent component's constructor function, and your component has access to all the functions of the parent component (React.Component).
    # Example:
        class Car extends React.Component {
            constructor() {
                super();
                this.state = {color: "red"};
            }
            render() {
                return <h2>I am a Car!</h2>;
            }
        }
    - Use the color property in the render() function:
        class Car extends React.Component {
            constructor() {
                super();
                this.state = {color: "red"};
            }
            render() {
                return <h2>I am a {this.state.color} Car!</h2>;
            }
        }


# Component properties are values that are assigned on individual components.
# Ways to handle properties in component: Uing state & props
1. Property named state in class_component is a object that stores all the properties of class_component as key-value-pair.
    > class Car extends React.Component {
        constructor() {
            super();
            this.state = {color: "red"}; **************************
        }
        render() {
            return <h2>I am a {this.state.color} Car!</h2>;
        }
    }
2. Send props into the component as attributes.
    class Car extends React.Component {
        render() {
            return <h2>I am a {this.props.color} Car!</h2>;
        }
    }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<Car color="red"/>);

3. Props in the Constructor:
    - If your component has a constructor function, the props should always be passed to the constructor and also to the React.Component via the super() method.
    class Car extends React.Component {
        constructor(props) {
            super(props);
        }
        render() {
            return <h2>I am a {this.props.model}!</h2>;
        }
    }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<Car model="Mustang"/>);


# Finally:
    class Car extends React.Component {
        constructor() {
            super();
            this.state = {color: this.props.color};
        }
        render() {
            return <h2>I am a {this.state.color} Car!</h2>;
        }
    }
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<Car color="red"/>);

# Components in Components
    - We can refer to components inside other components:

# Components in Files
    - React is all about re-using code, and it can be smart to insert some of your components in separate files.


# React Class Component State
    - React Class components have a built-in state object.
    - You might have noticed that we used state earlier in the component constructor section.
    - The state object is where you store property values that belongs to the component.
    - When the state object changes, the component re-renders.

# Always use the setState() method to change the state object, it will ensure that the component knows its been updated and calls the render() method (and all the other lifecycle methods).

# React Life-cycle:
    - Components are created (mounted on the DOM), grow by updating, and then die (unmount on DOM). 


